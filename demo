#!/usr/bin/env bash
set -e -u -o pipefail

declare -r SCRIPT_DIR=$(cd -P $(dirname $0) && pwd)

declare -r NAMESPACE=${NAMESPACE:-catalog-tests}

_log() {
  local level=$1
  shift
  echo -e "$level: $@"
}

log.err() {
  _log "ERROR" "$@" >&2
}

info() {
  _log "\nINFO" "$@"
}

err() {
  local code=$1
  shift
  local msg="$@"
  log.err $msg
  exit $code
}

valid_command() {
  local fn=$1
  [[ $(type -t "$fn") == "function" ]]
}

execute() {
  echo "Running:  '$@'"
  ${DRY_RUN:-false} || "$@"
}

show_failures() {
  local pipelineruns=("$@")
  echo "==========================="

  if [ ${#pipelineruns[@]} -eq 0 ]; then
    echo "All tests passed!"
    echo "==========================="
    exit 0
  else
    echo "List of failed tests:"
    for pr in "${pipelineruns[@]}"; do
      echo "${pr}"
    done
    echo "==========================="
    exit 1
  fi
}

set_maven_image() {
  os_arch=$(uname -m)
  if [ "$os_arch" == "ppc64le" ] || [ "$os_arch" == "s390x" ]; then
    sed -i "s|IMAGE_CHANGEME|maven:3.6.3-adoptopenjdk-11|" $1/pipeline.yaml
  else
    image=$(oc get clustertask $1 -o jsonpath="{.spec.params[?(@.name == 'MAVEN_IMAGE')].default}")
    sed -i "s|IMAGE_CHANGEME|${image}|" $1/pipeline.yaml
  fi
}

set_kn_image() {
  os_arch=$(uname -m)
  if [ "$os_arch" == "ppc64le" ] || [ "$os_arch" == "s390x" ]; then
    sed -i "s|IMAGE_CHANGEME|quay.io/multi-arch/knative-samples-helloworld-go:latest|" $1/tests/run.yaml
  else
    sed -i "s|IMAGE_CHANGEME|gcr.io/knative-samples/helloworld-go:latest|" $1/tests/run.yaml
  fi
}

run_tests() {
  local clustertasks=$@

  for clustertask in $clustertasks; do
    # remove trailing slash and subdirs (a -> a, b/ -> b, c/d/e -> c)
    local testname=${clustertask%%/*}
    local maxloop=60 # 10 minutes max

    # check if a directory for given clustertask exists
    if [ ! -d ${testname} ]; then
      failed_tests+=("directory \"${testname}\" doesn't exist")
      continue
    fi

    if [[ ${testname} == *maven ]]; then
      set_maven_image $testname
    fi

    if [[ ${testname} == *kn ]]; then
      set_kn_image $testname
    fi

    # Create the task and resources
    for yaml in ${testname}/*.yaml; do
      [ -f "$yaml" ] || continue
      oc create -n ${NAMESPACE} -f ${yaml}
    done

    # Create task runs
    for yaml in ${testname}/tests/*.yaml; do
      [ -f "$yaml" ] || continue
      pr=$(oc create -n ${NAMESPACE} -f ${yaml} -o jsonpath={.metadata.name})

      tkn pr logs -n ${NAMESPACE} -f ${pr}
      [[ $(oc get pipelinerun ${pr} -n ${NAMESPACE} -o 'jsonpath={.status.conditions[?(@.type=="Succeeded")].status}') == True ]] || failed_tests+=(${pr})
    done
  done

  show_failures "${failed_tests[@]}"
}

demo.validate() {
  info "validating tools"

  tkn version >/dev/null 2>&1 || err 1 "No tkn binary found"
  oc version >/dev/null 2>&1 || err 1 "No oc binary found"

  info "Ensure namespace $NAMESPACE exists"
  oc get ns "$NAMESPACE" 2>/dev/null || {
    oc new-project $NAMESPACE >/dev/null
  }

  info "Ensure pvc \"shared-pvc\" exists"
  oc get pvc shared-pvc -n "$NAMESPACE" 2>/dev/null || {
    oc apply -f pvc.yaml
  }

  return 0
}

demo.prepare() {
  set +e
  info "preparing namespace $NAMESPACE"
  if oc get ns "$NAMESPACE" 2>/dev/null; then
    tkn pipeline delete -n ${NAMESPACE} --all -f
    tkn pipelinerun delete -n ${NAMESPACE} --all -f
    oc delete is fedora -n ${NAMESPACE} --ignore-not-found
    oc delete ksvc --all -n ${NAMESPACE} --ignore-not-found 2>/dev/null
    oc delete pvc --all -n ${NAMESPACE} --ignore-not-found
    oc delete -f kn-apply/sa-role-binding.yaml -n ${NAMESPACE} --ignore-not-found
  else
    oc new-project $NAMESPACE >/dev/null
  fi

  oc apply -f pvc.yaml -n ${NAMESPACE}
  oc apply -f imagestream.yaml -n ${NAMESPACE}
  set -e
}

declare -r TASKS_DIR=tmp/tasks

demo.logs() {
  TKN tr logs "$@" -f
}

demo.test() {

  demo.validate

  # if no argument was specified, run all tests
  if [ "$#" -eq 0 ]; then
    local clustertasks="$(ls -d */)"
  else
    local clustertasks=$@
  fi

  run_tests $clustertasks
}

demo.test-disconnected() {

  demo.validate

  clustertasks=("buildah" "git-clone" "kn" "kn-apply" "openshift-client" "s2i-dotnet"
   "s2i-go" "s2i-java" "s2i-nodejs" "s2i-perl" "s2i-php" "s2i-python" "s2i-ruby" "tkn")

  run_tests ${clustertasks[@]}
}

demo.help() {
  cat <<-EOF
		USAGE:
		  $0 [command]

		COMMANDS:
		  prepare Removes the old resources, pipelines and pipeline runs, creates shared resources
		  test    Runs catalog E2E tests, runs all tests when no parameter specified
      test-disconnected Runs all catalog E2E tests specific to disconnected clusters
EOF

}

main() {
  local fn="demo.${1:-help}"
  valid_command "$fn" || {
    demo.help
    err  1 "invalid command '$1'"
  }

  if [ "$#" -gt 0 ]; then
    shift
  fi
  cd $SCRIPT_DIR

  $fn "$@"
  return $?
}

main "$@"
